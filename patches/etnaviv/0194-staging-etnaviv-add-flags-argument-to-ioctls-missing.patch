From 1a4ba8e3ca929ae79d714765dac47fa4167a6694 Mon Sep 17 00:00:00 2001
From: Lucas Stach <l.stach@pengutronix.de>
Date: Thu, 26 Nov 2015 20:10:23 +0100
Subject: [PATCH 194/195] staging: etnaviv: add flags argument to ioctls
 missing it

This adds a flags argument to some ioctls that were missing it up to
this point. For now it's only used in the fence and gem wait ioctls
to request non blocking behavior.

Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
---
 drivers/staging/etnaviv/etnaviv_drv.c | 23 ++++++++++++++++++++---
 include/uapi/drm/etnaviv_drm.h        |  6 ++++++
 2 files changed, 26 insertions(+), 3 deletions(-)

diff --git a/drivers/staging/etnaviv/etnaviv_drv.c b/drivers/staging/etnaviv/etnaviv_drv.c
index 6629308..8b815ae 100644
--- a/drivers/staging/etnaviv/etnaviv_drv.c
+++ b/drivers/staging/etnaviv/etnaviv_drv.c
@@ -332,6 +332,9 @@ static int etnaviv_ioctl_gem_cpu_fini(struct drm_device *dev, void *data,
 	struct drm_gem_object *obj;
 	int ret;
 
+	if (args->flags)
+		return -EINVAL;
+
 	obj = drm_gem_object_lookup(dev, file, args->handle);
 	if (!obj)
 		return -ENOENT;
@@ -368,8 +371,12 @@ static int etnaviv_ioctl_wait_fence(struct drm_device *dev, void *data,
 {
 	struct drm_etnaviv_wait_fence *args = data;
 	struct etnaviv_drm_private *priv = dev->dev_private;
+	struct timespec *timeout = &TS(args->timeout);
 	struct etnaviv_gpu *gpu;
 
+	if (args->flags & ~(ETNA_WAIT_NONBLOCK))
+		return -EINVAL;
+
 	if (args->pipe >= ETNA_MAX_PIPES)
 		return -EINVAL;
 
@@ -377,8 +384,11 @@ static int etnaviv_ioctl_wait_fence(struct drm_device *dev, void *data,
 	if (!gpu)
 		return -ENXIO;
 
+	if (args->flags & ETNA_WAIT_NONBLOCK)
+		timeout = NULL;
+
 	return etnaviv_gpu_wait_fence_interruptible(gpu, args->fence,
-						    &TS(args->timeout));
+						    timeout);
 }
 
 static int etnaviv_ioctl_gem_userptr(struct drm_device *dev, void *data,
@@ -416,10 +426,14 @@ static int etnaviv_ioctl_gem_wait(struct drm_device *dev, void *data,
 {
 	struct etnaviv_drm_private *priv = dev->dev_private;
 	struct drm_etnaviv_gem_wait *args = data;
+	struct timespec *timeout = &TS(args->timeout);
 	struct drm_gem_object *obj;
 	struct etnaviv_gpu *gpu;
 	int ret;
 
+	if (args->flags & ~(ETNA_WAIT_NONBLOCK))
+		return -EINVAL;
+
 	if (args->pipe >= ETNA_MAX_PIPES)
 		return -EINVAL;
 
@@ -431,7 +445,10 @@ static int etnaviv_ioctl_gem_wait(struct drm_device *dev, void *data,
 	if (!obj)
 		return -ENOENT;
 
-	ret = etnaviv_gem_wait_bo(gpu, obj, &TS(args->timeout));
+	if (args->flags & ETNA_WAIT_NONBLOCK)
+		timeout = NULL;
+
+	ret = etnaviv_gem_wait_bo(gpu, obj, timeout);
 
 	drm_gem_object_unreference_unlocked(obj);
 
@@ -501,7 +518,7 @@ static struct drm_driver etnaviv_drm_driver = {
 	.fops               = &fops,
 	.name               = "etnaviv",
 	.desc               = "etnaviv DRM",
-	.date               = "20150925",
+	.date               = "20151126",
 	.major              = 1,
 	.minor              = 0,
 };
diff --git a/include/uapi/drm/etnaviv_drm.h b/include/uapi/drm/etnaviv_drm.h
index 5f1206b..0cce95e 100644
--- a/include/uapi/drm/etnaviv_drm.h
+++ b/include/uapi/drm/etnaviv_drm.h
@@ -104,6 +104,7 @@ struct drm_etnaviv_gem_cpu_prep {
 
 struct drm_etnaviv_gem_cpu_fini {
 	__u32 handle;         /* in */
+	__u32 flags;          /* in, placeholder for now, no defined values */
 };
 
 /*
@@ -167,9 +168,12 @@ struct drm_etnaviv_gem_submit {
  * mainly just exists as a way to implement the gallium pipe_fence
  * APIs without requiring a dummy bo to synchronize on.
  */
+#define ETNA_WAIT_NONBLOCK      0x01
 struct drm_etnaviv_wait_fence {
 	__u32 pipe;           /* in */
 	__u32 fence;          /* in */
+	__u32 flags;          /* in, mask of ETNA_WAIT_x */
+	__u32 pad;
 	struct drm_etnaviv_timespec timeout;   /* in */
 };
 
@@ -185,6 +189,8 @@ struct drm_etnaviv_gem_userptr {
 struct drm_etnaviv_gem_wait {
 	__u32 pipe;				/* in */
 	__u32 handle;				/* in, bo to be waited for */
+	__u32 flags;				/* in, mask of ETNA_WAIT_x  */
+	__u32 pad;
 	struct drm_etnaviv_timespec timeout;	/* in */
 };
 
-- 
2.6.2

