From c56bd28e10f01c6d5e43a4cf0d5b208f3997b576 Mon Sep 17 00:00:00 2001
From: Russell King <rmk+kernel@arm.linux.org.uk>
Date: Thu, 16 Oct 2014 17:28:43 +0100
Subject: [PATCH 028/149] staging: etnaviv: move GPU memory management into MMU

The GPU memory management (managed by a drm_mm object) is used to
track which areas of the MMU address space are in-use.  Therefore,
this should be tied to the MMU object, rather than the GPU object.

This means we could (as comments suggest) have multiple MMU objects,
one for each context, and switch between them.  Each would need to
be managed by its own drm_mm object.

Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
---
 drivers/staging/etnaviv/etnaviv_gem.c | 2 +-
 drivers/staging/etnaviv/etnaviv_gpu.c | 4 ----
 drivers/staging/etnaviv/etnaviv_gpu.h | 3 ---
 drivers/staging/etnaviv/etnaviv_mmu.c | 3 +++
 drivers/staging/etnaviv/etnaviv_mmu.h | 2 ++
 5 files changed, 6 insertions(+), 8 deletions(-)

diff --git a/drivers/staging/etnaviv/etnaviv_gem.c b/drivers/staging/etnaviv/etnaviv_gem.c
index 20edaa6..c232980 100644
--- a/drivers/staging/etnaviv/etnaviv_gem.c
+++ b/drivers/staging/etnaviv/etnaviv_gem.c
@@ -292,7 +292,7 @@ int etnaviv_gem_get_iova_locked(struct etnaviv_gpu *gpu,
 		if (!node)
 			return -ENOMEM;
 
-		ret = drm_mm_insert_node(&gpu->mm, node, obj->size, 0,
+		ret = drm_mm_insert_node(&mmu->mm, node, obj->size, 0,
 				DRM_MM_SEARCH_DEFAULT);
 
 		if (!ret) {
diff --git a/drivers/staging/etnaviv/etnaviv_gpu.c b/drivers/staging/etnaviv/etnaviv_gpu.c
index 0ec5a23..65607ee 100644
--- a/drivers/staging/etnaviv/etnaviv_gpu.c
+++ b/drivers/staging/etnaviv/etnaviv_gpu.c
@@ -950,8 +950,6 @@ static void etnaviv_gpu_unbind(struct device *dev, struct device *master,
 
 	if (gpu->mmu)
 		etnaviv_iommu_destroy(gpu->mmu);
-
-	drm_mm_takedown(&gpu->mm);
 }
 
 static const struct component_ops gpu_ops = {
@@ -1031,8 +1029,6 @@ static int etnaviv_gpu_platform_probe(struct platform_device *pdev)
 	gpu->pipe = (long)match->data;
 
 	/* TODO: figure out max mapped size */
-	drm_mm_init(&gpu->mm, 0x80000000, SZ_1G);
-
 	dev_set_drvdata(dev, gpu);
 
 	err = component_add(&pdev->dev, &gpu_ops);
diff --git a/drivers/staging/etnaviv/etnaviv_gpu.h b/drivers/staging/etnaviv/etnaviv_gpu.h
index fca315a..3a9b198 100644
--- a/drivers/staging/etnaviv/etnaviv_gpu.h
+++ b/drivers/staging/etnaviv/etnaviv_gpu.h
@@ -111,9 +111,6 @@ struct etnaviv_gpu {
 
 	struct etnaviv_iommu *mmu;
 
-	/* memory manager for GPU address area */
-	struct drm_mm mm;
-
 	/* Power Control: */
 #if 0
 	struct regulator *gpu_reg, *gpu_cx;
diff --git a/drivers/staging/etnaviv/etnaviv_mmu.c b/drivers/staging/etnaviv/etnaviv_mmu.c
index 49cc096..12edc05 100644
--- a/drivers/staging/etnaviv/etnaviv_mmu.c
+++ b/drivers/staging/etnaviv/etnaviv_mmu.c
@@ -92,6 +92,7 @@ int etnaviv_iommu_unmap(struct etnaviv_iommu *iommu, uint32_t iova,
 
 void etnaviv_iommu_destroy(struct etnaviv_iommu *mmu)
 {
+	drm_mm_takedown(&mmu->mm);
 	iommu_domain_free(mmu->domain);
 	kfree(mmu);
 }
@@ -109,6 +110,8 @@ struct etnaviv_iommu *etnaviv_iommu_new(struct drm_device *dev,
 	mmu->dev = dev;
 	mmu->version = version;
 
+	drm_mm_init(&mmu->mm, 0x80000000, SZ_1G);
+
 	iommu_set_fault_handler(domain, etnaviv_fault_handler, dev);
 
 	return mmu;
diff --git a/drivers/staging/etnaviv/etnaviv_mmu.h b/drivers/staging/etnaviv/etnaviv_mmu.h
index f1a5d05..93aa4c6 100644
--- a/drivers/staging/etnaviv/etnaviv_mmu.h
+++ b/drivers/staging/etnaviv/etnaviv_mmu.h
@@ -31,6 +31,8 @@ struct etnaviv_iommu {
 
 	enum etnaviv_iommu_version version;
 
+	/* memory manager for GPU address area */
+	struct drm_mm mm;
 	bool need_flush;
 };
 
-- 
2.6.2

