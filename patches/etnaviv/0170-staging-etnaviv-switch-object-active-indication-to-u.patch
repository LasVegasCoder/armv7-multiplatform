From e76ddb36d751329fcdba636bed7cc3a1880f58ff Mon Sep 17 00:00:00 2001
From: Russell King <rmk+kernel@arm.linux.org.uk>
Date: Sun, 22 Nov 2015 23:01:45 +0000
Subject: [PATCH 170/195] staging: etnaviv: switch object active indication to
 use atomic_t

Switch the GPU object active indication to use atomic_t to track the
activity of the GPU with an object, so that we can determine when an
object (particularly a userbuf object) has been retired.

Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
---
 drivers/staging/etnaviv/etnaviv_gem.c | 2 +-
 drivers/staging/etnaviv/etnaviv_gem.h | 3 ++-
 drivers/staging/etnaviv/etnaviv_gpu.c | 2 ++
 3 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/drivers/staging/etnaviv/etnaviv_gem.c b/drivers/staging/etnaviv/etnaviv_gem.c
index a239754..cf37e41 100644
--- a/drivers/staging/etnaviv/etnaviv_gem.c
+++ b/drivers/staging/etnaviv/etnaviv_gem.c
@@ -484,7 +484,7 @@ void etnaviv_gem_free_object(struct drm_gem_object *obj)
 
 	WARN_ON(!mutex_is_locked(&dev->struct_mutex));
 
-	/* object should not be on active list: */
+	/* object should not be active */
 	WARN_ON(is_active(etnaviv_obj));
 
 	list_del(&etnaviv_obj->gem_node);
diff --git a/drivers/staging/etnaviv/etnaviv_gem.h b/drivers/staging/etnaviv/etnaviv_gem.h
index 8ad9b31..d016563 100644
--- a/drivers/staging/etnaviv/etnaviv_gem.h
+++ b/drivers/staging/etnaviv/etnaviv_gem.h
@@ -49,6 +49,7 @@ struct etnaviv_gem_object {
 
 	struct list_head gem_node;
 	struct etnaviv_gpu *gpu;     /* non-null if active */
+	atomic_t gpu_active;
 	u32 access;
 	u32 read_fence, write_fence;
 
@@ -81,7 +82,7 @@ struct etnaviv_gem_ops {
 
 static inline bool is_active(struct etnaviv_gem_object *etnaviv_obj)
 {
-	return etnaviv_obj->gpu != NULL;
+	return atomic_read(&etnaviv_obj->gpu_active) != 0;
 }
 
 #define MAX_CMDS 4
diff --git a/drivers/staging/etnaviv/etnaviv_gpu.c b/drivers/staging/etnaviv/etnaviv_gpu.c
index 89fdb47..5ae5945 100644
--- a/drivers/staging/etnaviv/etnaviv_gpu.c
+++ b/drivers/staging/etnaviv/etnaviv_gpu.c
@@ -975,6 +975,7 @@ static void retire_worker(struct work_struct *work)
 		for (i = 0; i < cmdbuf->nr_bos; i++) {
 			etnaviv_gem_move_to_inactive(&cmdbuf->bo[i]->base);
 			etnaviv_gem_put_iova(gpu, &cmdbuf->bo[i]->base);
+			atomic_dec(&cmdbuf->bo[i]->gpu_active);
 			drm_gem_object_unreference(&cmdbuf->bo[i]->base);
 		}
 
@@ -1130,6 +1131,7 @@ int etnaviv_gpu_submit(struct etnaviv_gpu *gpu,
 		drm_gem_object_reference(&etnaviv_obj->base);
 		etnaviv_gem_get_iova_locked(gpu, &etnaviv_obj->base, &iova);
 		cmdbuf->bo[i] = etnaviv_obj;
+		atomic_inc(&etnaviv_obj->gpu_active);
 
 		/* can't happen yet.. but when we add 2d support we'll have
 		 * to deal w/ cross-ring synchronization:
-- 
2.6.2

