From 95d0b1a5b4812fd58b38140f98679a07fbc2267a Mon Sep 17 00:00:00 2001
From: Matthijs van Duin <matthijsvanduin@gmail.com>
Date: Sat, 9 Jul 2016 19:12:42 +0200
Subject: [PATCH] mmc: use of_alias for device numbering

Signed-off-by: Matthijs van Duin <matthijsvanduin@gmail.com>
---
 drivers/mmc/core/block.c | 10 +++++++++-
 drivers/mmc/core/host.c  | 13 ++++++++++++-
 2 files changed, 21 insertions(+), 2 deletions(-)

diff --git a/drivers/mmc/core/block.c b/drivers/mmc/core/block.c
index bab3f07..92f183f 100644
--- a/drivers/mmc/core/block.c
+++ b/drivers/mmc/core/block.c
@@ -36,6 +36,7 @@
 #include <linux/compat.h>
 #include <linux/pm_runtime.h>
 #include <linux/idr.h>
+#include <linux/of.h>
 
 #include <linux/mmc/ioctl.h>
 #include <linux/mmc/card.h>
@@ -1820,13 +1821,20 @@ static struct mmc_blk_data *mmc_blk_alloc_req(struct mmc_card *card,
 {
 	struct mmc_blk_data *md;
 	int devidx, ret;
+	int mindynidx = max(0, of_alias_get_highest_id("mmc") + 1);
+	int reqidx = card->host->index;
 
 again:
 	if (!ida_pre_get(&mmc_blk_ida, GFP_KERNEL))
 		return ERR_PTR(-ENOMEM);
 
 	spin_lock(&mmc_blk_lock);
-	ret = ida_get_new(&mmc_blk_ida, &devidx);
+	ret = ida_get_new_above(&mmc_blk_ida, reqidx, &devidx);
+	if (!ret && devidx < mindynidx && devidx != reqidx) {
+		// requested index in use, fall back to dynamic
+		ida_remove(&mmc_blk_ida, devidx);
+		ret = ida_get_new_above(&mmc_blk_ida, mindynidx, &devidx);
+	}
 	spin_unlock(&mmc_blk_lock);
 
 	if (ret == -EAGAIN)
diff --git a/drivers/mmc/core/host.c b/drivers/mmc/core/host.c
index 98f25ff..9c211c5 100644
--- a/drivers/mmc/core/host.c
+++ b/drivers/mmc/core/host.c
@@ -346,6 +346,8 @@ struct mmc_host *mmc_alloc_host(int extra, struct device *dev)
 {
 	int err;
 	struct mmc_host *host;
+	int mindynidx = max(0, of_alias_get_highest_id("mmc") + 1);
+	int reqidx = dev->of_node ? of_alias_get_id(dev->of_node, "mmc") : -1;
 
 	host = kzalloc(sizeof(struct mmc_host) + extra, GFP_KERNEL);
 	if (!host)
@@ -361,7 +363,16 @@ struct mmc_host *mmc_alloc_host(int extra, struct device *dev)
 	}
 
 	spin_lock(&mmc_host_lock);
-	err = ida_get_new(&mmc_host_ida, &host->index);
+	if (reqidx >= 0) {
+		err = ida_get_new_above(&mmc_host_ida, reqidx, &host->index);
+		if (!err && host->index != reqidx) {
+			// requested index in use, fall back to dynamic
+			ida_remove(&mmc_host_ida, host->index);
+			reqidx = -1;
+		}
+	}
+	if (reqidx < 0)
+		err = ida_get_new_above(&mmc_host_ida, mindynidx, &host->index);
 	spin_unlock(&mmc_host_lock);
 
 	if (err == -EAGAIN) {
-- 
2.10.2

