From 7fc4af11984ab0c702c574ae3dd934a7a7f70175 Mon Sep 17 00:00:00 2001
From: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date: Wed, 16 Sep 2015 13:02:34 +0300
Subject: [PATCH 33/38] connector wip

---
 arch/arm/boot/dts/am335x-bone-common.dtsi | 459 ++++++++++++++++++++++++++++++
 drivers/extcon/Kconfig                    |   7 +
 drivers/extcon/Makefile                   |   1 +
 drivers/extcon/extcon-dt-con.c            | 119 ++++++++
 4 files changed, 586 insertions(+)
 create mode 100644 drivers/extcon/extcon-dt-con.c

diff --git a/arch/arm/boot/dts/am335x-bone-common.dtsi b/arch/arm/boot/dts/am335x-bone-common.dtsi
index e668c39..75e24b4 100644
--- a/arch/arm/boot/dts/am335x-bone-common.dtsi
+++ b/arch/arm/boot/dts/am335x-bone-common.dtsi
@@ -417,4 +417,463 @@
 			};
 		};
 	};
+
+	/* the device tree based connector */
+	dtcon {
+		compatible = "extcon,dt-con";
+		status = "okay";
+
+		connectors {
+
+			#address-cells = <1>;
+			#size-cells = <0>;
+			P8 {
+				reg = <8>;
+
+				#address-cells = <1>;
+				#size-cells = <0>;
+
+				GPIO1_6	{
+					reg = <3>;
+					pad = "R9";
+					modes = "gpmc_ad6", "mmc1_dat6", "", "", "", "", "", "gpio1_6";
+				};
+				GPIO1_7 {
+					reg = <4>;
+					pad = "T9";
+					modes = "gpmc_ad7", "mmc1_dat7", "", "", "", "", "", "gpio1_7";
+				};
+				GPIO1_2 {
+					reg = <5>;
+					pad = "R8";
+					modes = "gpmc_ad2", "mmc1_dat2", "", "", "", "", "", "gpio1_2";
+				};
+				GPIO1_3 {
+					reg = <6>;
+					pad = "T8";
+					modes = "gpmc_ad3", "mmc1_dat3", "", "", "", "", "", "gpio1_3";
+				};
+				TIMER4 {
+					reg = <7>;
+					pad = "R7";
+					modes = "gpmc_advn_ale", "", "timer4", "", "", "", "", "gpio2_2";
+				};
+				TIMER7 {
+					reg = <8>;
+					pad = "T7";
+					modes = "gpmc_oen_ren", "", "timer7", "", "", "", "", "gpio2_3";
+				};
+				TIMER5 {
+					reg = <9>;
+					pad = "T6";
+					modes = "gpmc_be0n_cle", "", "timer5", "", "", "", "", "gpio2_5";
+				};
+				TIMER6 {
+					reg = <10>;
+					pad = "U6";
+					modes = "gpmc_wen", "", "timer6", "", "", "", "", "gpio2_4";
+				};
+				GPIO1_13 {
+					reg = <11>;
+					pad = "R12";
+					modes = "gpmc_ad13", "lcd_data18", "mmc1_dat5", "mmc2_dat1", "eqep2b_in", "", "", "gpio1_13";
+				};
+				GPIO1_12 {
+					reg = <12>;
+					pad = "T12";
+					modes = "gpmc_ad12", "lcd_data19", "mmc1_dat4", "mmc2_dat0", "eqep2a_in", "", "", "gpio1_12";
+				};
+				EHRPWM2B {
+					reg = <13>;
+					pad = "T10";
+					modes = "gpmc_ad9", "lcd_data22", "mmc1_dat1", "mmc2_dat5", "ehrpwm2B", "", "", "gpio0_23";
+				};
+				GPIO0_26 {
+					reg = <14>;
+					pad = "T11";
+					modes = "gpmc_ad10", "lcd_data21", "mmc1_dat2", "mmc2_dat6", "ehrpwm2_tripzone_in", "", "", "gpio0_26";
+				};
+				GPIO1_15 {
+					reg = <15>;
+					pad = "U13";
+					modes = "gpmc_ad15", "lcd_data16", "mmc1_dat7", "mmc2_dat3", "eqep2_strobe", "", "", "gpio1_15";
+				};
+				GPIO1_14 {
+					reg = <16>;
+					pad = "V13";
+					modes = "gpmc_ad14", "lcd_data17", "mmc1_dat6", "mmc2_dat2", "eqep2_index", "", "", "gpio1_14";
+				};
+				GPIO0_27 {
+					reg = <17>;
+					pad = "U12";
+					modes = "gpmc_ad11", "lcd_data20", "mmc1_dat3", "mmc2_dat7", "ehrpwm0_synco", "", "", "gpio0_27";
+				};
+				GPIO2_1 {
+					reg = <18>;
+					pad = "V12";
+					modes = "gpmc_clk_mux0", "lcd_memory_clk", "gpmc_wait1", "mmc2_clk", "", "", "mcasp0_fsr", "gpio2_1";
+				};
+				EHRPWM2A {
+					reg = <19>;
+					pad = "U10";
+					modes = "gpmc_ad8", "lcd_data23", "mmc1_dat0", "mmc2_dat4", "ehrpwm2A", "", "", "gpio0_22";
+				};
+				GPIO1_31 {
+					reg = <20>;
+					pad = "V9";
+					modes = "gpmc_csn2", "gpmc_be1n", "mmc1_cmd", "", "", "", "", "gpio1_31";
+				};
+				GPIO1_30 {
+					reg = <21>;
+					pad = "U9";
+					modes = "gpmc_csn1", "gpmc_clk", "mmc1_clk", "", "", "", "", "gpio1_30";
+				};
+				GPIO1_5 {
+					reg = <22>;
+					pad = "V8";
+					modes = "gpmc_ad5", "mmc1_dat5", "", "", "", "", "", "gpio1_5";
+				};
+				GPIO1_4 {
+					reg = <23>;
+					pad = "U8";
+					modes = "gpmc_ad4", "mmc1_dat4", "", "", "", "", "", "gpio1_4";
+				};
+				GPIO1_1 {
+					reg = <24>;
+					pad = "V7";
+					modes = "gpmc_ad1", "mmc1_dat1", "", "", "", "", "", "gpio1_1";
+				};
+				GPIO1_0 {
+					reg = <25>;
+					pad = "U7";
+					modes = "gpmc_ad0", "mmc1_dat0", "", "", "", "", "", "gpio1_0";
+				};
+				GPIO1_29 {
+					reg = <26>;
+					pad = "V6";
+					modes = "gpmc_csn0", "", "", "", "", "", "", "gpio1_29";
+				};
+				GPIO2_22 {
+					reg = <27>;
+					pad = "U5";
+					modes = "lcd_vsync", "gpmc_a8", "", "", "", "", "", "gpio2_22";
+				};
+				GPIO2_24 {
+					reg = <28>;
+					pad = "V5";
+					modes = "lcd_pclk", "gpmc_a10", "", "", "", "", "", "gpio2_24";
+				};
+				GPIO2_23 {
+					reg = <29>;
+					pad = "R5";
+					modes = "lcd_hsync", "gpmc_a9", "", "", "", "", "", "gpio2_23";
+				};
+				GPIO2_25 {
+					reg = <30>;
+					pad = "R6";
+					modes = "lcd_ac_bias_en", "gpmc_a11", "", "", "", "", "", "gpio2_25";
+				};
+				UART5_CTSN {
+					reg = <31>;
+					pad = "V4";
+					modes = "lcd_data14", "gpmc_a18", "eqep1_index", "mcasp0_axr1", "uart5_rxd", "", "uart5_ctsn", "gpio0_10";
+				};
+				UART5_RTSN {
+					reg = <32>;
+					pad = "T5";
+					modes = "lcd_data15", "gpmc_a19", "eqep1_strobe", "mcasp0_ahclkx", "mcasp0_axr3", "", "uart5_rtsn", "gpio0_11";
+				};
+				UART4_RTSN {
+					reg = <33>;
+					pad = "V3";
+					modes = "lcd_data13", "gpmc_a17", "eqep1b_in", "mcasp0_fsr", "mcasp0_axr3", "", "uart4_rtsn", "gpio0_9";
+				};
+				UART3_RTSN {
+					reg = <34>;
+					pad = "U4";
+					modes = "lcd_data11", "gpmc_a15", "ehrpwm1B", "mcasp0_ahclkr", "mcasp0_axr2", "", "uart3_rtsn", "gpio2_17";
+				};
+				UART4_CTSN {
+					reg = <35>;
+					pad = "V2";
+					modes = "lcd_data12", "gpmc_a16", "eqep1a_in", "mcasp0_aclkr", "mcasp0_axr2", "", "uart4_ctsn", "gpio0_8";
+				};
+				UART3_CTSN {
+					reg = <36>;
+					pad = "U3";
+					modes = "lcd_data10", "gpmc_a14", "ehrpwm1A", "mcasp0_axr0", "", "", "uart3_ctsn", "gpio2_16";
+				};
+				UART5_TXD {
+					reg = <37>;
+					pad = "U1";
+					modes = "lcd_data8", "gpmc_a12", "ehrpwm1_tripzone_in", "mcasp0_aclkx", "uart5_txd", "", "uart2_ctsn", "gpio2_14";
+				};
+				UART5_RXD {
+					reg = <38>;
+					pad = "U2";
+					modes = "lcd_data9", "gpmc_a13", "ehrpwm0_synco", "mcasp0_fsx", "uart5_rxd", "", "uart2_rtsn", "gpio2_15";
+				};
+				GPIO2_12 {
+					reg = <39>;
+					pad = "T3";
+					modes = "lcd_data6", "gpmc_a6", "", "eqep2_index", "", "", "", "gpio2_12";
+				};
+				GPIO2_13 {
+					reg = <40>;
+					pad = "T4";
+					modes = "lcd_data7", "gpmc_a7", "", "eqep2_strobe", "pr1_edio_data_out7", "", "", "gpio2_13";
+				};
+				GPIO2_10 {
+					reg = <41>;
+					pad = "T1";
+					modes = "lcd_data4", "gpmc_a4", "", "eqep2a_in", "", "", "", "gpio2_10";
+				};
+				GPIO2_11 {
+					reg = <42>;
+					pad = "T2";
+					modes = "lcd_data5", "gpmc_a5", "", "eqep2b_in", "", "", "", "gpio2_11";
+				};
+				GPIO2_8 {
+					reg = <43>;
+					pad = "R3";
+					modes = "lcd_data2", "gpmc_a2", "", "ehrpwm2_tripzone_in", "", "", "", "gpio2_8";
+				};
+				GPIO2_9 {
+					reg = <44>;
+					pad = "R4";
+					modes = "lcd_data3", "gpmc_a3", "", "ehrpwm0_synco", "", "", "", "gpio2_9";
+				};
+				GPIO2_6 {
+					reg = <45>;
+					pad = "R1";
+					modes = "lcd_data0", "gpmc_a0", "", "ehrpwm2A", "", "", "", "gpio2_6";
+				};
+				GPIO2_7 {
+					reg = <46>;
+					pad = "R2";
+					modes = "lcd_data1", "gpmc_a1", "", "ehrpwm2B", "", "", "", "gpio2_7";
+				};
+			};
+
+			P9 {
+				reg = <9>;
+
+				#address-cells = <1>;
+				#size-cells = <0>;
+
+				GND {
+					reg = <1>, <2>, <43>, <44>, <45>, <46>;
+				};
+
+				DC_3_3V {
+					reg = <3>, <4>;
+				};
+
+				VDD_5V {
+					reg = <5>, <6>;
+				};
+
+				SYS_5V {
+					reg = <7>, <8>;
+				};
+
+				PWR_BUT {
+					reg = <9>;
+				};
+
+				SYS_RESETn {
+					reg = <10>;
+					pad = "A10";
+					modes = "RESET_OUT", "", "", "", "", "", "", "";
+				};
+
+				UART4_RXD {
+					reg = <11>;
+					pad = "T17";
+					modes = "gpmc_wait0", "mii2_crs", "gpmc_csn4", "rmii2_crs_dv", "mmc1_sdcd", "", "uart4_rxd_mux2", "gpio0_30";
+				};
+
+				GPIO1_28 {
+					reg = <12>;
+					pad = "U18";
+					modes = "gpmc_be1n", "mii2_col", "gpmc_csn6", "mmc2_dat3", "gpmc_dir", "", "mcasp0_aclkr_mux3", "gpio1_28";
+				};
+
+				UART4_TXD {
+					reg = <13>;
+					pad = "U17";
+					modes = "gpmc_wpn", "mii2_rxerr", "gpmc_csn5", "rmii2_rxerr", "mmc2_sdcd", "", "uart4_txd_mux2", "gpio0_31";
+				};
+
+				EHRPWM1A {
+					reg = <14>;
+					pad = "U14";
+					modes = "gpmc_a2", "mii2_txd3", "rgmii2_td3", "mmc2_dat1", "gpmc_a18", "", "ehrpwm1A_mux1", "gpio1_18";
+				};
+
+				GPIO1_16 {
+					reg = <15>;
+					pad = "R13";
+					modes = "gpmc_a0", "gmii2_txen", "rmii2_tctl", "mii2_txen", "gpmc_a16", "", "ehrpwm1_tripzone_input", "gpio1_16";
+				};
+
+				EHRPWM1B {
+					reg = <16>;
+					pad = "T14";
+					modes = "gpmc_a3", "mii2_txd2", "rgmii2_td2", "mmc2_dat2", "gpmc_a19", "", "ehrpwm1B_mux1", "gpio1_19";
+				};
+
+				I2C1_SCL {
+					reg = <17>;
+					pad = "A16";
+					modes = "spi0_cs0", "mmc2_sdwp", "i2c1_scl", "ehrpwm0_synci", "", "", "", "gpio0_5";
+				};
+
+				I2C1_SDA {
+					reg = <18>;
+					pad = "B16";
+					modes = "spi0_d1", "mmc1_sdwp", "i2c1_sda", "ehrpwm0_tripzone", "", "", "", "gpio0_4";
+				};
+
+				I2C2_SCL {
+					reg = <19>;
+					pad = "D17";
+					modes = "uart1_rtsn", "timer5", "dcan0_rx", "i2c2_scl", "spi1_cs1", "", "", "gpio0_13";
+				};
+
+				I2C2_SDA {
+					reg = <20>;
+					pad = "D18";
+					modes = "uart1_ctsn", "timer6", "dcan0_tx", "i2c2_sda", "spi1_cs0", "", "", "gpio0_12";
+				};
+
+				UART2_TXD {
+					reg = <21>;
+					pad = "B17";
+					modes = "spi0_d0", "uart2_txd", "i2c2_scl", "ehrpwm0B", "", "", "emu3_mux1", "gpio0_3";
+				};
+
+				UART2_RXD {
+					reg = <22>;
+					pad = "A17";
+					modes = "spi0_sclk", "uart2_rxd", "i2c2_sda", "ehrpwm0A", "", "", "emu2_mux1", "gpio0_2";
+				};
+
+				GPIO1_17 {
+					reg = <23>;
+					pad = "V14";
+					modes = "gpmc_a1", "gmii2_rxdv", "rgmii2_rxdv", "mmc2_dat0", "gpmc_a17", "", "ehrpwm0_synco", "gpio1_17";
+				};
+
+				UART1_TXD {
+					reg = <24>;
+					pad = "D15";
+					modes = "uart1_txd", "mmc2_sdwp", "dcan1_rx", "i2c1_scl", "", "", "", "gpio0_15";
+				};
+
+				GPIO3_21 {
+					reg = <25>;
+					pad = "A14";
+					modes = "mcasp0_ahclkx", "eqep0_strobe", "mcasp0_axr3", "mcasp1_axr1", "emu4_mux2", "", "", "gpio3_21";
+				};
+
+				UART1_RXD {
+					reg = <26>;
+					pad = "D16";
+					modes = "uart1_rxd", "mmc1_sdwp", "dcan1_tx", "i2c1_sda", "", "", "", "gpio0_14";
+				};
+
+				GPIO3_19 {
+					reg = <27>;
+					pad = "C13";
+					modes = "mcasp0_fsr", "eqep0b_in", "mcasp0_axr3", "mcasp1_fsx", "emu2_mux2", "", "", "gpio3_19";
+				};
+
+				SPI1_CS0 {
+					reg = <28>;
+					pad = "C12";
+					modes = "mcasp0_ahclkr", "ehrpwm0_synci", "mcasp0_axr2", "spi1_cs0", "ecap2_in_pwm2_out", "", "", "gpio3_17";
+				};
+
+				SPI1_D0 {
+					reg = <29>;
+					pad = "B13";
+					modes = "mcasp0_fsx", "ehrpwm0b", "", "spi1_d0", "mmc1_sdcd_mux1", "", "", "gpio3_15";
+				};
+
+				SPI1_D1 {
+					reg = <30>;
+					pad = "D12";
+					modes = "mcasp0_axr0", "ehrpwm0_tripzone", "", "spi1_d1", "mmc2_sdcd_mux1", "", "", "gpio3_16";
+				};
+
+				SPI1_SCLK {
+					reg = <31>;
+					pad = "A13";
+					modes = "mcasp0_aclkx", "ehrpwm0a", "", "spi1_sclk", "mmc0_sdcd_mux1", "", "", "gpio3_14";
+				};
+				VADC {
+					reg = <32>;
+				};
+				AIN4 {
+					reg = <33>;
+					pad = "C8";
+				};
+				AGND {
+					reg = <34>;
+				};
+				AIN6 {
+					reg = <35>;
+					pad = "A8";
+				};
+				AIN5 {
+					reg = <36>;
+					pad = "B8";
+				};
+				AIN2 {
+					reg = <37>;
+					pad = "B7";
+				};
+				AIN3 {
+					reg = <38>;
+					pad = "A7";
+				};
+				AIN0 {
+					reg = <39>;
+					pad = "B6";
+				};
+				AIN1 {
+					reg = <40>;
+					pad = "C7";
+				};
+				CLKOUT2 {
+					/* wired with GPIO3_20 */
+					reg = <41>;
+					pad = "D14";
+					modes = "xdma_event_intr1", "", "tclkin", "clkout2", "timer7_mux1", "", "emu3_mux0", "gpio0_20";
+				};
+				GPIO3_20 {
+					/* wired with CLKOUT2 */
+					reg = <41>;
+					pad = "D13";
+					modes = "mcasp0_axr1", "eqep0_index", "", "mcasp1_axr0", "emu3", "", "", "gpio3_20";
+				};
+				GPIO0_7 {
+					/* wired with GPIO3_18 */
+					reg = <42>;
+					pad = "C18";
+					modes = "ecap0_in_pwm0_out", "uart3_txd", "spi1_cs1", "pr1_ecap0_ecap_capin_apwm_o", "spi1_sclk", "mmc0_sdwp", "xdma_event_intr2", "gpio0_7";
+				};
+				GPIO3_18 {
+					/* wired with GPIO0_7 */
+					reg = <42>;
+					pad = "B12";
+					modes = "mcasp0_aclkr", "eqep0a_in", "mcaspo_axr2", "mcasp1_aclkx", "", "", "", "gpio3_18";
+				};
+			};
+		};
+
+		devices {
+		};
+	};
 };
diff --git a/drivers/extcon/Kconfig b/drivers/extcon/Kconfig
index 0cebbf6..26887b3 100644
--- a/drivers/extcon/Kconfig
+++ b/drivers/extcon/Kconfig
@@ -35,6 +35,13 @@ config EXTCON_AXP288
 	  Say Y here to enable support for USB peripheral detection
 	  and USB MUX switching by X-Power AXP288 PMIC.
 
+config EXTCON_DT_CON
+	tristate "Device Tree Overlay based connector"
+	depends on OF || COMPILE_TEST
+	select OF_OVERLAY
+	help
+	  Say Y here to enable Device Tree Overlay based connector
+
 config EXTCON_GPIO
 	tristate "GPIO extcon support"
 	depends on GPIOLIB || COMPILE_TEST
diff --git a/drivers/extcon/Makefile b/drivers/extcon/Makefile
index ba787d0..7ab396ee 100644
--- a/drivers/extcon/Makefile
+++ b/drivers/extcon/Makefile
@@ -6,6 +6,7 @@ obj-$(CONFIG_EXTCON)		+= extcon.o
 obj-$(CONFIG_EXTCON_ADC_JACK)	+= extcon-adc-jack.o
 obj-$(CONFIG_EXTCON_ARIZONA)	+= extcon-arizona.o
 obj-$(CONFIG_EXTCON_AXP288)	+= extcon-axp288.o
+obj-$(CONFIG_EXTCON_DT_CON)	+= extcon-dt-con.o
 obj-$(CONFIG_EXTCON_GPIO)	+= extcon-gpio.o
 obj-$(CONFIG_EXTCON_MAX14577)	+= extcon-max14577.o
 obj-$(CONFIG_EXTCON_MAX77693)	+= extcon-max77693.o
diff --git a/drivers/extcon/extcon-dt-con.c b/drivers/extcon/extcon-dt-con.c
new file mode 100644
index 0000000..ba77e7a
--- /dev/null
+++ b/drivers/extcon/extcon-dt-con.c
@@ -0,0 +1,119 @@
+/*
+ *  drivers/extcon/extcon-dt-conn.c
+ *
+ *  Device Tree Overlay based connector driver.
+ *
+ * Copyright (C) 2015 Konsulko Group.
+ * Author: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+*/
+
+#include <linux/extcon.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/workqueue.h>
+#include <linux/of.h>
+
+struct dtcon_data {
+	struct extcon_dev *edev;
+};
+
+static const unsigned int dtcon_cable[] = {
+	EXTCON_NONE,
+};
+
+static int dtcon_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct device_node *np = dev->of_node;
+	struct dtcon_data *dtcd;
+	int ret;
+
+	if (!np) {
+		dev_err(dev, "No device node\n");
+		return -ENODEV;
+	}
+
+	dtcd = devm_kzalloc(dev, sizeof(*dtcd), GFP_KERNEL);
+	if (!dtcd) {
+		dev_err(dev, "Failed to allocated data structure\n");
+		return -ENOMEM;
+	}
+
+	dtcd->edev = devm_extcon_dev_allocate(dev, dtcon_cable);
+	if (IS_ERR(dtcd->edev)) {
+		dev_err(dev, "Failed to allocate extcon device\n");
+		ret = PTR_ERR(dtcd->edev);
+		return ret;
+	}
+
+	ret = devm_extcon_dev_register(dev, dtcd->edev);
+	if (ret < 0) {
+		dev_err(dev, "Failed to register extcon device\n");
+		return ret;
+	}
+
+	platform_set_drvdata(pdev, dtcd);
+
+	dev_info(dev, "OK\n");
+
+	return 0;
+}
+
+static int dtcon_remove(struct platform_device *pdev)
+{
+	struct dtcon_data *dtcd = platform_get_drvdata(pdev);
+	(void)dtcd;
+	return 0;
+}
+
+#ifdef CONFIG_PM_SLEEP
+static int dtcon_resume(struct device *dev)
+{
+	struct dtcon_data *dtcd;
+
+	dtcd = dev_get_drvdata(dev);
+
+	return 0;
+}
+#endif
+
+static SIMPLE_DEV_PM_OPS(dtcon_pm_ops, NULL, dtcon_resume);
+
+static const struct of_device_id dtcon_of_match[] = {
+	{
+		.compatible = "extcon,dt-con",
+	},
+	{ },
+};
+MODULE_DEVICE_TABLE(of, capemgr_of_match);
+
+static struct platform_driver dtcon_driver = {
+	.probe		= dtcon_probe,
+	.remove		= dtcon_remove,
+	.driver		= {
+		.name	= "extcon-dt-con",
+		.pm	= &dtcon_pm_ops,
+		.of_match_table = of_match_ptr(dtcon_of_match),
+	},
+};
+
+module_platform_driver(dtcon_driver);
+
+MODULE_AUTHOR("Pantelis Antoniou <pantelis.antoniou@konsulko.com>");
+MODULE_DESCRIPTION("DT connector extcon driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:extcon-dt-con");
-- 
2.6.4

